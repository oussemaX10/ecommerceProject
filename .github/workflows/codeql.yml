# CodeQL Advanced Security Analysis
# This workflow performs security analysis on your Spring Boot + Angular ERP project
name: "CodeQL Advanced"

on:
  push:
    branches: [ "master", "main" ]
  pull_request:
    branches: [ "master", "main" ]
  schedule:
    # Run CodeQL analysis every Thursday at 17:28 UTC
    - cron: '28 17 * * 4'

jobs:
  analyze:
    name: Analyze (${{ matrix.language }})
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    timeout-minutes: ${{ (matrix.language == 'swift' && 120) || 360 }}
    permissions:
      # required for all workflows
      security-events: write
      # required to fetch internal or private CodeQL packs
      packages: read
      # only required for workflows in private repositories
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
        # Java/Kotlin for Spring Boot backend
        - language: java-kotlin
          build-mode: none # Use 'none' for Maven/Gradle projects
        # JavaScript/TypeScript for Angular frontend
        - language: javascript-typescript
          build-mode: none # Use 'none' for Node.js projects

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Setup Java 17 for Spring Boot 3 analysis
    - name: Setup Java 17
      if: matrix.language == 'java-kotlin'
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Setup Node.js for Angular analysis
    - name: Setup Node.js
      if: matrix.language == 'javascript-typescript'
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: '**/package-lock.json'

    # Cache Maven dependencies
    - name: Cache Maven dependencies
      if: matrix.language == 'java-kotlin'
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    # Initialize CodeQL tools for scanning
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        build-mode: ${{ matrix.build-mode }}
        # Enhanced security queries for ERP systems with OAuth2 and multi-database setup
        queries: security-extended,security-and-quality
        # Custom configuration for Spring 3 + MongoDB + PostgreSQL + Elasticsearch + Keycloak
        config: |
          name: "ERP Security Analysis - Spring 3 Stack"
          queries:
            - uses: security-extended
            - uses: security-and-quality
          paths-ignore:
            - "node_modules"
            - "target"
            - "dist"
            - "build"
            - "**/*.min.js"
            - "**/*.d.ts"
            - "**/generated/**"
            - "**/elasticsearch/data/**"
            - "**/mongodb/data/**"
          paths:
            - "src"
            - "frontend/src"
            - "backend/src"
          query-filters:
            - exclude:
                id: "java/spring/disabled-csrf-protection"
                reason: "OAuth2 with Keycloak may require CSRF adjustments"

    # Install dependencies for Angular (if frontend exists)
    - name: Install Angular dependencies
      if: matrix.language == 'javascript-typescript'
      run: |
        if [ -f "package.json" ]; then
          npm ci
        elif [ -f "frontend/package.json" ]; then
          cd frontend && npm ci
        elif [ -f "client/package.json" ]; then
          cd client && npm ci
        else
          echo "No package.json found, skipping npm install"
        fi

    # Build Spring Boot 3 application (if backend exists)
    - name: Build Spring Boot 3 application
      if: matrix.language == 'java-kotlin'
      run: |
        if [ -f "pom.xml" ]; then
          ./mvnw clean compile -DskipTests -Dmaven.test.skip=true
        elif [ -f "backend/pom.xml" ]; then
          cd backend && ./mvnw clean compile -DskipTests -Dmaven.test.skip=true
        elif [ -f "build.gradle" ]; then
          ./gradlew compileJava -x test
        elif [ -f "backend/build.gradle" ]; then
          cd backend && ./gradlew compileJava -x test
        else
          echo "No build file found, skipping build"
        fi

    # Manual build step (only if build-mode is manual)
    - name: Manual build
      if: matrix.build-mode == 'manual'
      shell: bash
      run: |
        echo 'Building ERP application manually...'
        # Add your custom build commands here
        # For Spring Boot:
        # ./mvnw clean compile
        # For Angular:
        # npm run build
        echo 'Manual build completed'

    # Perform CodeQL Analysis
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"
        upload: true

    # Upload results to GitHub Security tab
    - name: Upload CodeQL results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: ${{ runner.workspace }}/results/

  # Enhanced dependency security check for Spring 3 + Multi-database stack
  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Java 17 dependency check for Spring 3 stack
    - name: Setup Java 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Cache Maven dependencies for faster builds
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Run Maven Dependency Check for Spring 3 Stack
      if: hashFiles('**/pom.xml') != ''
      run: |
        if [ -f "pom.xml" ]; then
          ./mvnw org.owasp:dependency-check-maven:check -Dformat=ALL
        elif [ -f "backend/pom.xml" ]; then
          cd backend && ./mvnw org.owasp:dependency-check-maven:check -Dformat=ALL
        fi

    # Check for Spring Security vulnerabilities specifically
    - name: Spring Security Vulnerability Check
      if: hashFiles('**/pom.xml') != ''
      run: |
        echo "Checking for Spring Security and OAuth2 vulnerabilities..."
        if [ -f "pom.xml" ]; then
          ./mvnw dependency:tree | grep -E "(spring-security|oauth2|keycloak)" || echo "No Spring Security dependencies found"
        elif [ -f "backend/pom.xml" ]; then
          cd backend && ./mvnw dependency:tree | grep -E "(spring-security|oauth2|keycloak)" || echo "No Spring Security dependencies found"
        fi

    # Database driver security check
    - name: Database Driver Security Check
      if: hashFiles('**/pom.xml') != ''
      run: |
        echo "Checking database driver versions..."
        if [ -f "pom.xml" ]; then
          ./mvnw dependency:tree | grep -E "(postgresql|mongodb|elasticsearch)" || echo "No database drivers found"
        elif [ -f "backend/pom.xml" ]; then
          cd backend && ./mvnw dependency:tree | grep -E "(postgresql|mongodb|elasticsearch)" || echo "No database drivers found"
        fi

    # Node.js dependency check
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Run NPM Audit
      if: hashFiles('**/package-lock.json') != ''
      run: |
        if [ -f "package.json" ]; then
          npm audit --audit-level=moderate
        elif [ -f "frontend/package.json" ]; then
          cd frontend && npm audit --audit-level=moderate
        elif [ -f "client/package.json" ]; then
          cd client && npm audit --audit-level=moderate
        fi

    # Snyk security scanning (optional - requires SNYK_TOKEN secret)
    - name: Run Snyk to check for vulnerabilities
      if: env.SNYK_TOKEN != ''
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        command: test
        args: --severity-threshold=high

    # Container security scanning optimized for Spring 3 + Multi-database setup
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: hashFiles('**/Dockerfile') != ''
    permissions:
      security-events: write
      contents: read
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Build multi-stage Docker images for Spring 3 application
    - name: Build Docker images
      run: |
        if [ -f "Dockerfile" ]; then
          docker build -t erp-app:latest .
        elif [ -f "backend/Dockerfile" ]; then
          cd backend && docker build -t erp-backend:latest .
        fi
        
        # Build additional service images if they exist
        if [ -f "docker-compose.yml" ]; then
          docker-compose build --no-cache
        fi

    - name: Run Trivy vulnerability scanner for Spring 3 stack
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'erp-app:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'HIGH,CRITICAL'
        # Focus on Java/Spring specific vulnerabilities
        vuln-type: 'os,library'

    # Scan for specific database and security library vulnerabilities
    - name: Scan for database driver vulnerabilities
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'erp-app:latest'
        format: 'json'
        output: 'trivy-db-results.json'
        # Focus on database drivers and OAuth2/Keycloak libraries
        skip-files: '/usr/local/openjdk-17'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Database security configuration check
  database-security-check:
    name: Database Security Configuration Check
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Check for insecure database configurations
    - name: Check database configuration security
      run: |
        echo "Checking for insecure database configurations..."
        
        # Check application.yml/properties for insecure settings
        find . -name "application*.yml" -o -name "application*.properties" | while read file; do
          echo "Checking $file for security issues..."
          
          # Check for hardcoded credentials
          if grep -E "(password|secret|key).*[:=].*[^$]" "$file" | grep -v "placeholder" | grep -v "example"; then
            echo "⚠️  WARNING: Potential hardcoded credentials found in $file"
          fi
          
          # Check for insecure database URLs
          if grep -E "(ssl=false|sslmode=disable)" "$file"; then
            echo "⚠️  WARNING: Insecure database connection (SSL disabled) found in $file"
          fi
          
          # Check for development settings in production
          if grep -E "(debug.*true|logging.*debug)" "$file"; then
            echo "⚠️  WARNING: Debug settings found in $file"
          fi
        done

    # Check Docker configurations for database security
    - name: Check Docker database security
      if: hashFiles('**/docker-compose.yml') != ''
      run: |
        echo "Checking Docker database configurations..."
        
        if [ -f "docker-compose.yml" ]; then
          # Check for default passwords in docker-compose
          if grep -E "(POSTGRES_PASSWORD|MONGO_INITDB_ROOT_PASSWORD|ELASTICSEARCH_PASSWORD)" docker-compose.yml | grep -v "placeholder" | grep -v "example"; then
            echo "⚠️  WARNING: Database passwords found in docker-compose.yml"
          fi
          
          # Check for insecure network configurations
          if grep -E "network_mode.*host" docker-compose.yml; then
            echo "⚠️  WARNING: Host network mode found in docker-compose.yml"
          fi
        fi

    # OAuth2/Keycloak security check
    - name: Check OAuth2/Keycloak configuration
      run: |
        echo "Checking OAuth2/Keycloak configurations..."
        
        # Check for insecure OAuth2 settings
        find . -name "*.yml" -o -name "*.properties" -o -name "*.json" | while read file; do
          if grep -E "(keycloak|oauth2)" "$file"; then
            echo "Found OAuth2/Keycloak configuration in $file"
            
            # Check for insecure settings
            if grep -E "(ssl.*false|secure.*false)" "$file"; then
              echo "⚠️  WARNING: Insecure OAuth2 settings found in $file"
            fi
          fi
        done
